env:
  LANG: ru_RU.UTF-8 # check with $ lang -a | grep RU
  TERM: xterm-256color

window:
  dimensions:
    columns: 80
    lines: 40

  position:
    x: 0
    y: 0

  padding:
    x: 2
    y: 2

  # spread additional padding evenly around terminal content
  dynamic_padding: false

  # Window decorations
  decorations: full

scrolling:
  history: 10000
  multiplier: 3

font:
  normal:
    family: JetBrains Mono
    style: Regular

  bold:
    style: Bold

  italic:
    style: Italic

  bold_italic:
    style: Bold Italic

  size: 15

  offset:
    x: 0
    y: 0

  use_thin_strokes: true

# If `true`, bold text is drawn using the bright color variants.
#draw_boldtext_with_bright_colors: false

# Colors (Tomorrow Night Bright)
#colors:
  # Default colors
  #primary:
  #  background: '#000000'
  #  foreground: '#eaeaea'

    # Bright and dim foreground colors
    #
    # The dimmed foreground color is calculated automatically if it is not present.
    # If the bright foreground color is not set, or `draw_bold_text_with_bright_colors`
    # is `false`, the normal foreground color will be used.
    #dim_foreground: '#9a9a9a'
    #bright_foreground: '#ffffff'

  # Cursor colors
  #
  # Colors which should be used to draw the terminal cursor. If these are unset,
  # the cursor color will be the inverse of the cell color.
  #cursor:
  #  text: '#000000'
  #  cursor: '#ffffff'

  # Selection colors
  #
  # Colors which should be used to draw the selection area. If selection
  # background is unset, selection color will be the inverse of the cell colors.
  # If only text is unset the cell text color will remain the same.
  #selection:
  #  text: '#eaeaea'
  #  background: '#404040'

  # Normal colors
  #normal:
  #  black:   '#000000'
  #  red:     '#d54e53'
  #  green:   '#b9ca4a'
  #  yellow:  '#e6c547'
  #  blue:    '#7aa6da'
  #  magenta: '#c397d8'
  #  cyan:    '#70c0ba'
  #  white:   '#eaeaea'

  # Bright colors
  #bright:
  #  black:   '#666666'
  #  red:     '#ff3334'
  #  green:   '#9ec400'
  #  yellow:  '#e7c547'
  #  blue:    '#7aa6da'
  #  magenta: '#b77ee0'
  #  cyan:    '#54ced6'
  #  white:   '#ffffff'

  # Dim colors
  #
  # If the dim colors are not set, they will be calculated automatically based
  # on the `normal` colors.
  #dim:
  #  black:   '#000000'
  #  red:     '#8c3336'
  #  green:   '#7a8530'
  #  yellow:  '#97822e'
  #  blue:    '#506d8f'
  #  magenta: '#80638e'
  #  cyan:    '#497e7a'
  #  white:   '#9a9a9a'

  # Indexed Colors
  #
  # The indexed colors include all colors from 16 to 256.
  # When these are not set, they're filled with sensible defaults.
  #
  # Example:
  #   `- { index: 16, color: '#ff00ff' }`
  #
  #indexed_colors: []

# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Values for `animation`:
#   - Ease
#   - EaseOut
#   - EaseOutSine
#   - EaseOutQuad
#   - EaseOutCubic
#   - EaseOutQuart
#   - EaseOutQuint
#   - EaseOutExpo
#   - EaseOutCirc
#   - Linear
#
# Specifying a `duration` of `0` will disable the visual bell.
#visual_bell:
#  animation: EaseOutExpo
#  duration: 0
#  color: '#ffffff'

# Background opacity
background_opacity: 1.0

#selection:
  #semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>\t"

  # When set to `true`, selected text will be copied to the primary clipboard.
  #save_to_clipboard: false

# Allow terminal applications to change Alacritty's window title.
#dynamic_title: true

cursor:
  style: Block
  unfocused_hollow: false

# Live config reload (changes require restart)
live_config_reload: true

# Shell
shell:
  program: /bin/bash
  args:
    - -l
    - -c
    - "tmux attach || tmux"

# Startup directory
#
# Directory the shell is started in. If this is unset, or `None`, the working
# directory of the parent process will be used.
#working_directory: None

# WinPTY backend (Windows only)
#
# Alacritty defaults to using the newer ConPTY backend if it is available,
# since it resolves a lot of bugs and is quite a bit faster. If it is not
# available, the the WinPTY backend will be used instead.
#
# Setting this option to `true` makes Alacritty use the legacy WinPTY backend,
# even if the ConPTY backend is available.
#winpty_backend: false

# Send ESC (\x1b) before characters when alt is pressed.
#alt_send_esc: true

#mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  #double_click: { threshold: 300 }
  #triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  #hide_when_typing: false

  #url:
    # URL launcher
    #
    # This program is executed when clicking on a text which is recognized as a URL.
    # The URL is always added to the command as the last parameter.
    #
    # When set to `None`, URL launching will be disabled completely.
    #
    # Default:
    #   - (macOS) open
    #   - (Linux/BSD) xdg-open
    #   - (Windows) explorer
    #launcher:
    #  program: xdg-open
    #  args: []

    # URL modifiers
    #
    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    #modifiers: None

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty captures the mouse, the
# `Shift` modifier is automatically added as a requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
#mouse_bindings:
#  - { mouse: Middle, action: PasteSelection }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ReceiveChar
#   - None
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# at once.
#
key_bindings:
  - { key: Semicolon,       mods: Command|Shift, command: { program: "/usr/local/bin/tmux", args: ["command-prompt"] } }
    # - { key: N,           mods: Command, action: SpawnNewInstance }
    #
  - { key: T,           mods: Command|Shift, command: { program: "/usr/local/bin/tmux", args: ["new-window"] } }
  - { key: T,           mods: Command|Shift|Control, command: { program: "/usr/local/bin/tmux", args: ["new-session"] } }
  - { key: W,           mods: Command|Shift, command: { program: "/usr/local/bin/tmux", args: ["kill-pane"] } }
  - { key: LBracket,    mods: Command|Shift, command: { program: "/usr/local/bin/tmux", args: ["previous-window"] } }
  - { key: RBracket,    mods: Command|Shift, command: { program: "/usr/local/bin/tmux", args: ["next-window"] } }
    #
  - { key: LBracket,    mods: Command, command: { program: "/usr/local/bin/tmux", args: ["copy-mode"] } }
  - { key: RBracket,    mods: Command, command: { program: "/usr/local/bin/tmux", args: ["paste-buffer"] } }
    #
  - { key: V,           mods: Command|Shift, command: { program: "/usr/local/bin/tmux", args: ["split-window", "-h"] } }
  - { key: S,           mods: Command|Shift, command: { program: "/usr/local/bin/tmux", args: ["split-window"] } }
    #
  - { key: Key1,        mods: Command, command: { program: "/usr/local/bin/tmux", args: ["select-window", "-t", "1"] } }
  - { key: Key2,        mods: Command, command: { program: "/usr/local/bin/tmux", args: ["select-window", "-t", "2"] } }
  - { key: Key3,        mods: Command, command: { program: "/usr/local/bin/tmux", args: ["select-window", "-t", "3"] } }
  - { key: Key4,        mods: Command, command: { program: "/usr/local/bin/tmux", args: ["select-window", "-t", "4"] } }
  - { key: Key5,        mods: Command, command: { program: "/usr/local/bin/tmux", args: ["select-window", "-t", "5"] } }
  - { key: Key6,        mods: Command, command: { program: "/usr/local/bin/tmux", args: ["select-window", "-t", "6"] } }
  - { key: Key7,        mods: Command, command: { program: "/usr/local/bin/tmux", args: ["select-window", "-t", "7"] } }
  - { key: Key8,        mods: Command, command: { program: "/usr/local/bin/tmux", args: ["select-window", "-t", "8"] } }
  - { key: Key9,        mods: Command, command: { program: "/usr/local/bin/tmux", args: ["select-window", "-t", "9"] } }
  - { key: Key0,        mods: Command, command: { program: "/usr/local/bin/tmux", args: ["select-window", "-t", "0"] } }
    # Movement
  - { key: K,           mods: Command, command: { program: "/usr/local/bin/tmux", args: ["select-pane", "-U"] } }
  - { key: J,           mods: Command, command: { program: "/usr/local/bin/tmux", args: ["select-pane", "-D"] } }
  - { key: H,           mods: Command, command: { program: "/usr/local/bin/tmux", args: ["select-pane", "-L"] } }
  - { key: L,           mods: Command, command: { program: "/usr/local/bin/tmux", args: ["select-pane", "-R"] } }
    # Resizing
  - { key: Up,          mods: Command, command: { program: "/usr/local/bin/tmux", args: ["resize-pane", "-U", "2"] } }
  - { key: Down,        mods: Command, command: { program: "/usr/local/bin/tmux", args: ["resize-pane", "-D", "2"] } }
  - { key: Left,        mods: Command, command: { program: "/usr/local/bin/tmux", args: ["resize-pane", "-L", "2"] } }
  - { key: Right,       mods: Command, command: { program: "/usr/local/bin/tmux", args: ["resize-pane", "-R", "2"] } }
    # Rotate window
  - { key: O,           mods: Command, command: { program: "/usr/local/bin/tmux", args: ["rotate-window"] } }
    # Kill Pane
  - { key: X,           mods: Command, command: { program: "/usr/local/bin/tmux", args: ["confirm-before", "-p", "kill-pane #P? (y,n)", "kill-pane"] } }
    # Layout
  - { key: Key1,       mods: Command|Alt, command: { program: "/usr/local/bin/tmux", args: ["select-layout", "even-horizontal"] } }
  - { key: Key2,       mods: Command|Alt, command: { program: "/usr/local/bin/tmux", args: ["select-layout", "even-vertical"] } }
  - { key: Key3,       mods: Command|Alt, command: { program: "/usr/local/bin/tmux", args: ["select-layout", "main-horizontal"] } }
  - { key: Key4,       mods: Command|Alt, command: { program: "/usr/local/bin/tmux", args: ["select-layout", "main-vertical"] } }
  - { key: Key5,       mods: Command|Alt, command: { program: "/usr/local/bin/tmux", args: ["select-layout", "tiled"] } }
  - { key: Key0,       mods: Command|Alt, command: { program: "/usr/local/bin/tmux", args: ["next-layout"] } }
    # 
  - { key: W,       mods: Command, command: { program: "/usr/local/bin/tmux", args: ["choose-window"] } }
  - { key: S,       mods: Command, command: { program: "/usr/local/bin/tmux", args: ["choose-tree"] } }
  - { key: T,       mods: Command, command: { program: "/usr/local/bin/tmux", args: ["clock-mode"] } }
  - { key: Q,       mods: Command, command: { program: "/usr/local/bin/tmux", args: ["display-panes"] } }
    #
  - { key: Q,       mods: Command, command: { program: "/usr/local/bin/tmux", args: ["display-panes"] } }
    # - { key: D,       mods: Command, command: { program: "/usr/local/bin/tmux", args: ["confirm-before", "-p", "detach? (y,n)", "detach-client"] } }
    # Renamings
  - { key: Comma,       mods: Command, command: { program: "/usr/local/bin/tmux", args: ["command-prompt", "-I", "#W", "rename-window '%%'"] } }
  - { key: Comma,       mods: Command|Shift, command: { program: "/usr/local/bin/tmux", args: ["command-prompt", "-I", "#S", "rename-session '%%'"] } }
    # Move window
    # - { key: Period,       mods: Command, command: { program: "/usr/local/bin/tmux", args: ["command-prompt", "move-window -t '%%'"] } }



debug:
  render_timer: false

  # Keep the log file after quitting Alacritty.
  #persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - None
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  #log_level: Warn

  # Print all received window events.
  #print_events: false
